{"version":3,"sources":["action/constants.js","component/header/index.js","action/auth.action.js","component/layout/index.js","container/homePage/index.js","action/user.action.js","component/card/index.js","container/loginPage/index.js","container/signUpPage/index.js","component/privetRoute.js","App.js","serviceWorker.js","reducer/authReducer.js","reducer/userReducer.js","reducer/index.js","store/index.js","index.js"],"names":["authConstants","require","auth","userConstants","Header","props","useSelector","state","dispatch","useDispatch","className","isAuthenticated","to","firstName","lastName","onClick","uid","a","type","firestore","collection","doc","update","isOnline","then","signOut","localStorage","clear","catch","payload","error","console","log","LayOut","children","User","user","src","alt","style","margin","display","justifyContent","flex","fontWeight","fontSize","textTransform","HomePage","unsubscribe","useState","chating","setChating","chatName","setChatName","message","setMsg","ruid","setRuid","useEffect","db","onSnapshot","querySnapshot","users","forEach","data","push","f","e","initChat","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","length","getRealtimeMsges","map","key","con","textAlign","value","onChange","target","placeholder","msgObj","add","isView","createdAt","Date","updateMessages","Card","LoginPage","email","setUserName","password","setPassword","onSubmit","preventDefault","signInWithEmailAndPassword","name","displayName","split","loggedUser","setItem","JSON","stringify","alert","SignUpPage","setFirstName","setLastName","createUserWithEmailAndPassword","currentUser","updateProfile","set","er","err","signup","class","PrivetRoute","Component","component","rest","getItem","parse","App","path","exact","homePage","loginPage","signUpPage","Boolean","window","location","hostname","match","initialState","isAuthenticating","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c36e4b2.chunk.js","sourcesContent":["const { auth } = require(\"firebase\");\r\n\r\nexport const authConstants = {\r\n    USER_LOGIN: 'USER_LOGIN',\r\n    USER_LOGOUT: 'USER_LOGOUT'\r\n} \r\n\r\nexport const userConstants = {\r\n    GET_REALTIME_USERS: 'GET_REALTIME_USERS',\r\n    GET_REALTIME_MSGES: 'GET_REALTIME_MSGES',\r\n    GET_REALTIME_MSGES_FAILIER: 'GET_REALTIME_MSGES_FAILIER'\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { logOut } from '../../action/auth.action'\r\nimport './style.css'\r\n\r\n/**\r\n* @author\r\n* @function Header\r\n**/\r\n\r\nconst Header = (props) => {\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n  return(\r\n    <header className=\"header\">\r\n        <div className=\"leftMenu\">\r\n            <div className=\"logo\">Web Messenger</div>\r\n\r\n            {\r\n                !auth.isAuthenticated ?\r\n                <ul className=\"loginSignUpMenu\">\r\n                    <li><NavLink to={'/login'}>Login</NavLink></li>\r\n                    <li><NavLink to={'/signup'}>sign-up</NavLink></li>\r\n                </ul> \r\n                : null\r\n\r\n            }\r\n\r\n        </div>\r\n        \r\n        <div className=\"greatings\">\r\n        {\r\n            auth.isAuthenticated ?\r\n            `Hello ${auth.firstName} ${auth.lastName}`\r\n            : \"\"\r\n        }\r\n        </div>\r\n\r\n        {\r\n            auth.isAuthenticated ?\r\n            <ul className=\"rightMenu\">\r\n                <Link to={'#'} onClick={() => {\r\n                    dispatch(logOut(auth.uid));\r\n                }}>Logout</Link>\r\n            </ul>\r\n            : \"\"\r\n        }\r\n\r\n    </header>\r\n   )\r\n\r\n }\r\n\r\nexport default Header\r\n","import {auth,firestore} from 'firebase'\r\nimport { authConstants } from './constants';\r\n\r\n\r\nexport const signup = (user) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: `${authConstants.USER_LOGIN}_REQUEST`,\r\n        })\r\n        const db = firestore();\r\n\r\n        auth()\r\n        .createUserWithEmailAndPassword(user.email,user.password)\r\n        .then( (data) => {\r\n            console.log(data);\r\n            \r\n            const currentUser = auth().currentUser;\r\n            const name = `${user.firstName} ${user.lastName}`;\r\n            currentUser.updateProfile({\r\n                displayName: name\r\n            })\r\n            .then( () => {\r\n                db.collection('users')\r\n                .doc(data.user.uid)\r\n                .set({\r\n                    firstName: user.firstName,\r\n                    lastName: user.lastName,\r\n                    uid: data.user.uid,\r\n                    createdAt: new Date(),\r\n                    isOnline: true\r\n                })\r\n                .then( () => {\r\n                    const loggedUser = {\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                        email: user.email,\r\n                        uid: data.user.uid,\r\n                    }\r\n                    localStorage.setItem('user',JSON.stringify(loggedUser));\r\n                    console.log(\"you are succesfully logged in !!!\");\r\n\r\n                    dispatch({\r\n                        type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n                        payload: { user: loggedUser }\r\n                    })\r\n                } )\r\n                .catch( (error) => {\r\n                    console.log(error);\r\n                    dispatch({\r\n                        type: `${authConstants.USER_LOGIN}_FAILIER`,\r\n                        payload: { error } \r\n                    })\r\n                })\r\n            })\r\n            .catch( (er) => {\r\n                console.log(er);\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n}\r\n\r\nexport const signIn = (user) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: `${authConstants.USER_LOGIN}_REQUEST`,\r\n        })\r\n            auth()\r\n            .signInWithEmailAndPassword(user.email,user.password)\r\n            .then( (data) => {\r\n\r\n                    const db = firestore();\r\n\r\n                    db.collection('users')\r\n                    .doc(data.user.uid)\r\n                    .update({\r\n                        isOnline: true\r\n                    })\r\n                    .then( () => {\r\n                        //console.log(data);\r\n                        \r\n                        const name = data.user.displayName.split(\" \");\r\n                        const firstName = name[0];\r\n                        const lastName = name[1];\r\n\r\n                        const loggedUser = {\r\n                            firstName,\r\n                            lastName,\r\n                            email: user.email,\r\n                            uid: data.user.uid,\r\n                        }\r\n\r\n                        localStorage.setItem('user',JSON.stringify(loggedUser));\r\n\r\n                        dispatch({\r\n                            type : `${authConstants.USER_LOGIN}_SUCCESS`,\r\n                            payload : { user: loggedUser}\r\n                        })\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                            console.log(error);\r\n                    })\r\n                }) \r\n                .catch( (error) => {\r\n                console.log(error);\r\n                dispatch({\r\n                    type : `${authConstants.USER_LOGIN}_FAILIER`,\r\n                    payload : { error }\r\n                })\r\n            \r\n        })\r\n        \r\n\r\n        \r\n    }\r\n}\r\n\r\nexport const isLoggedIn = () => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n        \r\n        if(user){\r\n            dispatch({\r\n                type : `${authConstants.USER_LOGIN}_SUCCESS`,\r\n                payload : { user }\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type : `${authConstants.USER_LOGIN}_FAILIER`,\r\n                payload : { error : \"cannot find a user\" }\r\n             })\r\n        }\r\n    }\r\n}\r\n\r\nexport const logOut = (uid) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: `${authConstants.USER_LOGOUT}_REQUEST`,\r\n        })\r\n\r\n        const db = firestore();\r\n\r\n        db.collection('users')\r\n        .doc(uid)\r\n        .update({\r\n            isOnline: false\r\n        })\r\n        .then(()=> {\r\n            auth()\r\n            .signOut()\r\n            .then( () => {\r\n\r\n                localStorage.clear();\r\n                dispatch({\r\n                    type: `${authConstants.USER_LOGOUT}_SUCCESS`\r\n                })\r\n            })\r\n            .catch( () => {\r\n                dispatch({\r\n                    type : `${authConstants.USER_LOGOUT}_FAILIER`,\r\n                    payload : { error : \"cannot loout\" }\r\n                })\r\n            })\r\n        })\r\n        .catch((error) => { \r\n            console.log(\"error\");\r\n        })\r\n\r\n    \r\n    }\r\n}","import React from 'react'\r\nimport Header from '../header'\r\n\r\n/**\r\n* @author\r\n* @function LayOut\r\n**/\r\n\r\nconst LayOut = (props) => {\r\n  return(\r\n      <div>\r\n        <Header />\r\n        {props.children}\r\n      </div>\r\n   )\r\n\r\n }\r\n\r\nexport default LayOut","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getRealtimeData, getRealtimeMsges, updateMessages } from '../../action';\r\nimport LayOut from '../../component/layout';\r\n\r\nimport './style.css';\r\n\r\nconst User = (props) => {\r\n\r\n  const user = props.user;\r\n  const onClick = props.onClick;\r\n \r\n \r\n\r\n\r\n\r\n  return (\r\n      <div onClick={() => onClick(user)} className=\"displayName\" >\r\n        <div className=\"displayPic\">\r\n            <img src=\"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\" alt=\"\" />\r\n        </div>\r\n        <div  style={{margin: '0 10px',display: 'flex',justifyContent: 'space-between',flex: '1'}}>\r\n            <span style={{fontWeight: 500,fontSize: '12px',textTransform:'capitalize'}}>{user.firstName} {user.lastName}</span>\r\n            <span className={user.isOnline ? \"onlineStatus\" : \"onlineStatus off\"}></span> \r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector(state => state.auth);\r\n  const user = useSelector(state => state.user);\r\n  const [chating,setChating] = useState(false);\r\n  const [chatName,setChatName] = useState(\"\");\r\n  const [message,setMsg] = useState(\"\");\r\n  const [ruid,setRuid] = useState('');\r\n\r\n  let unsubscribe;\r\n\r\n  useEffect( () => {\r\n\r\n    unsubscribe = dispatch(getRealtimeData(auth.uid))\r\n    .then( unsubscribe => {\r\n      return unsubscribe;\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    });\r\n\r\n  }, [] )\r\n\r\n  useEffect( () => {\r\n    \r\n    return () => {\r\n      unsubscribe.then(f => f()).catch((e) => console.log(e));\r\n    }\r\n\r\n  }, [] )\r\n\r\n  const initChat = (user) => {\r\n    setChating(true);\r\n    setChatName(`${user.firstName} ${user.lastName}`);\r\n    setRuid(user.uid)\r\n\r\n    dispatch(getRealtimeMsges({uid_1:auth.uid,uid_2:user.uid}));\r\n\r\n  }\r\n\r\n  const submitMsg = (e) => {\r\n\r\n    const msgObj = {\r\n      user_uid_1: auth.uid,\r\n      user_uid_2: ruid,\r\n      message \r\n    }\r\n    \r\n    dispatch(updateMessages(msgObj))\r\n    .then(() => {\r\n      setMsg(\"\");\r\n    });\r\n    console.log(msgObj);\r\n  }\r\n\r\n  return (\r\n    <LayOut>\r\n      <section className=\"container\">\r\n      <div className=\"listOfUsers\">\r\n            {\r\n              user.users.length > 0 ? \r\n              user.users.map( (user) => {\r\n                return (\r\n\r\n                    <User onClick={initChat} key={user.uid} user={user} />\r\n                       \r\n                )\r\n            \r\n              }) : null\r\n            }\r\n        </div>\r\n        \r\n        <div className=\"chatArea\">\r\n               \r\n                    <div className=\"chatHeader\"> \r\n                    {\r\n                      chating ? chatName : \"\"\r\n                    }\r\n                    </div>\r\n                    <div className=\"messageSections\">\r\n                    {\r\n                      chating ? \r\n                      user.conversations.map( (con) => \r\n                        <div style={{ textAlign: con.user_uid_1 == auth.uid ? 'right' : 'left'}}>\r\n                          <p className=\"messageStyle\" > {con.message}</p>\r\n                        </div>  \r\n                      )\r\n                       : null\r\n                    }\r\n                    </div>\r\n                \r\n                    \r\n\r\n              \r\n                  <div className=\"chatControls\">\r\n                      <input type=\"text\" value={message} onChange={(e) => setMsg(e.target.value)} className=\"textType\" placeholder=\"Type message here\" />\r\n                      <button onClick={submitMsg}>Send</button>\r\n                  </div>\r\n                  \r\n        </div>\r\n      </section>\r\n    </LayOut>\r\n  );\r\n}\r\n\r\nexport default HomePage;","import { firestore } from \"firebase\"\r\nimport { userConstants } from \"./constants\"\r\n\r\nexport const getRealtimeData = (uid) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: `${userConstants.GET_REALTIME_USERS}_REQUEST`,\r\n        })\r\n\r\n        const db = firestore();\r\n        const unsubscribe = db.collection(\"users\")\r\n        //.where(\"state\", \"==\", \"CA\")\r\n        .onSnapshot((querySnapshot) => {\r\n            const users = [];\r\n            \r\n                querySnapshot.forEach((doc) => {\r\n                    if(doc.data().uid !== uid){\r\n                        users.push(doc.data());\r\n                    }\r\n                });   \r\n            \r\n            // console.log(doc.data());\r\n            dispatch({\r\n                type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\r\n                payload: { users }\r\n            })\r\n\r\n        });\r\n\r\n        return unsubscribe;\r\n    }\r\n}\r\n\r\nexport const updateMessages = (msgObj) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        const db = firestore();\r\n\r\n        db.collection('conversation')\r\n        .add({\r\n            ...msgObj,\r\n            isView: false,\r\n            createdAt: new Date()\r\n        })\r\n        .then((data) => {\r\n            console.log(data);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n} \r\n\r\nexport const getRealtimeMsges = (user) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        const db = firestore();\r\n\r\n        db.collection('conversation')\r\n        .where('user_uid_1','in',[user.uid_1,user.uid_2])\r\n        .orderBy('createdAt','asc')\r\n        .onSnapshot((querySnapshot) => {\r\n            \r\n            const conversations = [];\r\n            querySnapshot.forEach( (doc) => {\r\n\r\n                if((doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2)\r\n                    ||\r\n                    (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1))\r\n                {\r\n                    conversations.push(doc.data())\r\n                }\r\n\r\n                if(conversations.length>0)\r\n                {\r\n                    dispatch({\r\n                        type: userConstants.GET_REALTIME_MSGES,\r\n                        payload: { conversations }\r\n                    })\r\n                }\r\n                else{\r\n\r\n                    dispatch({\r\n                        type: `${userConstants.GET_REALTIME_MSGES}_FAILIER`,\r\n                        payload: {conversations: []}\r\n                    })\r\n                }\r\n            })\r\n\r\n            console.log(conversations);\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport './style.css'\r\n\r\n/**\r\n* @author\r\n* @function Card\r\n**/\r\n\r\nconst Card = (props) => {\r\n  return(\r\n    <div className=\"card\">\r\n        {props.children}\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default Card","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { signIn } from '../../action'\r\nimport Card from '../../component/card'\r\nimport LayOut from '../../component/layout'\r\nimport './style.css'\r\n\r\n/**\r\n* @author\r\n* @function loginPage\r\n**/\r\n\r\nconst LoginPage = (props) => {\r\n\r\n  const [email,setUserName] = useState('');\r\n  const [password,setPassword] = useState('');\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector(state => state.auth);\r\n\r\n  const loginUser = (e) => {\r\n\r\n    e.preventDefault();\r\n    if(email === \"\"){\r\n      alert(\"username cannot be empty\");\r\n      return;\r\n    }\r\n    if(password === \"\"){\r\n      alert(\"passwod cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    dispatch(signIn({email,password}));\r\n  }\r\n\r\n  if(auth.isAuthenticated === true){\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return(\r\n    <LayOut>\r\n      <div className=\"loginContainer\">\r\n        <Card>\r\n          <form onSubmit={loginUser} className=\"loginForm\">\r\n            <div className=\"formHeader\">log into account</div>\r\n            <div className=\"inputs\">\r\n              <input className=\"inputContainer\"\r\n                value={email}\r\n                onChange={(e) => setUserName(e.target.value)}\r\n                placeholder=\"User Name\"\r\n              />\r\n              <input className=\"inputContainer\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                placeholder=\"Password\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"loginBtn\">\r\n              <button>login</button>\r\n            </div>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </LayOut>\r\n    \r\n   )\r\n\r\n }\r\n\r\nexport default LoginPage","import React,{useState} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { signup } from '../../action'\r\nimport Card from '../../component/card'\r\nimport LayOut from '../../component/layout'\r\nimport './style.css'\r\n\r\n/**\r\n* @author\r\n* @function signUpPage\r\n**/\r\n\r\nconst SignUpPage = (props) => {\r\n\r\n  const [firstName,setFirstName] = useState('');\r\n  const [lastName,setLastName] = useState('');\r\n  const [email,setUserName] = useState('');\r\n  const [password,setPassword] = useState('');\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector(state => state.auth);\r\n\r\n  const registerUser = (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n      firstName,lastName,email,password\r\n    }\r\n    dispatch(signup(user));\r\n  }\r\n\r\n  if(auth.isAuthenticated === true){\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return(\r\n    <LayOut>\r\n      <div className=\"signUpContainer\">\r\n        <Card>\r\n          <form onSubmit={registerUser} className=\"signUpForm\">\r\n            <div className=\"formHeader\">Creat account</div>\r\n            <div class=\"inputs\">\r\n              <input \r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n              placeholder=\"First Name\"\r\n              />\r\n              <input \r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n                placeholder=\"Last Name\"\r\n              />\r\n              <input \r\n              value={email}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              placeholder=\"Email\"\r\n              />\r\n              <input \r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                placeholder=\"Password\"\r\n              />\r\n            </div>\r\n            <div className=\"signupBtn\">\r\n              <button>sign-up</button>\r\n            </div>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </LayOut>\r\n   )\r\n\r\n }\r\n\r\nexport default SignUpPage","import React, { Component } from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\n/**\r\n* @author\r\n* @function PrivetRoute\r\n**/\r\n\r\nconst PrivetRoute = ({component : Component, ...rest}) => {\r\n  return(\r\n    <Route {...rest} component = {(props) => {\r\n      const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null\r\n      if(user){\r\n        return <Component {...props}/>\r\n      }\r\n      else{\r\n        return <Redirect to='/login' />\r\n      }\r\n    }}/>\r\n   )\r\n\r\n }\r\n\r\nexport default PrivetRoute;","import React, { useEffect } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport homePage from './container/homePage';\nimport loginPage from './container/loginPage';\nimport signUpPage from './container/signUpPage';\nimport PrivetRoute from './component/privetRoute';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoggedIn } from './action';\n\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const auth = useSelector( state => state.auth);\n  \n  useEffect( () => {\n    \n    console.log(auth.isAuthenticated);\n    if(!auth.isAuthenticated){\n      dispatch(isLoggedIn());\n    }\n  \n  }, [] )\n\n  return (\n    <div className=\"App\">\n    <Router>\n      <PrivetRoute path='/' exact component={homePage} />\n      <Route path='/login' component={loginPage}/>\n      <Route path='/signup' component={signUpPage}/>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { authConstants } from '../action/constants';\r\n\r\nconst initialState = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    uid: '',\r\n    isAuthenticated: false,\r\n    isAuthenticating: false,\r\n    error: null\r\n}\r\n\r\nexport default (state = initialState,action) => {\r\n\r\n    console.log(action);\r\n\r\n    switch(action.type){\r\n    \r\n        case `${authConstants.USER_LOGIN}_REQUEST`:\r\n            state = {\r\n                ...state,\r\n                isAuthenticating: true,\r\n            }\r\n            break;\r\n\r\n        case `${authConstants.USER_LOGIN}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                ...action.payload.user,\r\n                isAuthenticated: true,\r\n                isAuthenticating:false\r\n            }\r\n            break;\r\n        \r\n        case `${authConstants.USER_LOGIN}_FAILIER`:\r\n            state = {\r\n                ...state,\r\n                error: action.payload.error,\r\n                isAuthenticating: false,\r\n                isAuthenticated: false\r\n            }\r\n            break;\r\n        \r\n        case `${authConstants.USER_LOGOUT}_REQUEST`:\r\n            break;\r\n        \r\n        case `${authConstants.USER_LOGOUT}_SUCCESS`:\r\n            state = {\r\n                ...initialState,\r\n            }\r\n            break;\r\n       \r\n        case `${authConstants.USER_LOGOUT}_FAILIER`:\r\n            state = {\r\n                ...state,\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\n\r\n","import { userConstants } from \"../action/constants\";\r\n\r\nconst initialState = {\r\n    users: [],\r\n    conversations:[]\r\n}\r\n\r\nexport default (state = initialState,action) => {\r\n\r\n    switch(action.type) {\r\n        \r\n        case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\r\n            break;\r\n        \r\n        case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                users: action.payload.users\r\n            }\r\n            break;\r\n\r\n        case userConstants.GET_REALTIME_MSGES:\r\n            state = {\r\n                ...state,\r\n                conversations: action.payload.conversations\r\n            }\r\n            break;\r\n            \r\n    }\r\n    return state;\r\n}","import {combineReducers} from 'redux'\r\nimport authReducer from './authReducer' \r\nimport userReducer from './userReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    user: userReducer\r\n})\r\n\r\nexport default rootReducer;\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport rootReducer from '../reducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux'\nimport firebase from 'firebase'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD9Kz2yKA7cqVdnM3iml0VeC1bmBR-JddE\",\n  authDomain: \"online-chating-app.firebaseapp.com\",\n  databaseURL: \"https://online-chating-app.firebaseio.com\",\n  projectId: \"online-chating-app\",\n  storageBucket: \"online-chating-app.appspot.com\",\n  messagingSenderId: \"748775564473\",\n  appId: \"1:748775564473:web:590876040b64c4efdea768\",\n  measurementId: \"G-7ER85TEJ19\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n    <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}